/*
 * Copyleft (C) 2018
 * @author "Nilton Constantino" aka bQUARKz <bquarkz@gmail.com>
 */
package bquarkz.utilitybelt.dynamicsearch;

import com.querydsl.core.types.Predicate;

import java.util.*;
import java.util.function.Function;

/**
 * <p>
 *     Some description for new class.
 * </p>
 */
public class DynamicSearchAnalysis
{
    // ****************************************************************************************************************
    // Const Fields
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Common Fields
    // ****************************************************************************************************************
    private final ParseTreeBuilder parseTreeBuilder;

    // ****************************************************************************************************************
    // Transient
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Constructors
    // ****************************************************************************************************************
    public DynamicSearchAnalysis( String content )
    {
        this.parseTreeBuilder = new Grammar()
                .withDictionary( new MyDictionary() )
                .apply( Tokenizer.that( content ) );
    }

    // ****************************************************************************************************************
    // Factories
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Features
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Getters And Setters Methods
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Methods
    // ****************************************************************************************************************
    public Optional< Predicate > buildPredicateOver( Function< String, Predicate > behavior )
    {
        return parseTreeBuilder.evalute( new QueryDslEvaluation(), behavior );
    }

    // ****************************************************************************************************************
    // Patterns
    // ****************************************************************************************************************
}