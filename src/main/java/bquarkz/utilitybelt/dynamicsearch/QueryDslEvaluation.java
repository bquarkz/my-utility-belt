/*
 * Copyleft (C) 2018
 * @author "Nilton Constantino" aka bQUARKz <bquarkz@gmail.com>
 */
package bquarkz.utilitybelt.dynamicsearch;

import com.querydsl.core.types.ExpressionUtils;
import com.querydsl.core.types.Predicate;

import java.util.function.BiFunction;
import java.util.function.Function;

public class QueryDslEvaluation implements Evaluation< Predicate >
{
    // ****************************************************************************************************************
    // Const Fields
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Common Fields
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Transient
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Constructors
    // ****************************************************************************************************************
    protected QueryDslEvaluation()
    {
    }

    // ****************************************************************************************************************
    // Factories
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Features
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Getters And Setters Methods
    // ****************************************************************************************************************
    @Override public BiFunction<Predicate, Predicate, Predicate> getAND()
    {
        return ( left, right ) -> ExpressionUtils.allOf( left, right );
    }

    @Override public BiFunction<Predicate, Predicate, Predicate> getOR()
    {
        return ( left, right ) -> ExpressionUtils.anyOf( left, right );
    }

    @Override public Function<Predicate, Predicate> getNOT()
    {
        return ( content ) -> content.not();
    }

    // ****************************************************************************************************************
    // Methods
    // ****************************************************************************************************************

    // ****************************************************************************************************************
    // Patterns
    // ****************************************************************************************************************
}